{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAOaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAsCC,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAqBA,OACI,qCACI,6CAEA,sBAAMC,SAjBO,SAACC,GAElBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAWd,SAEI,uBACIO,KAAO,OACPC,MAAUT,EACVU,SA3BU,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,gB,+BCXnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAUH,GAH9C,+DAIKI,MAAOF,GAJZ,cAIbG,EAJa,gBAKIA,EAAUC,OALd,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAoBZM,GApBY,4CAAH,sDCAPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OACI,sBAAKc,UAAU,4BAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCCJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAkBtB,ECxBwB,SAAEA,GAG1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OAnBAC,qBAAU,WACNxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IASGqB,EDL0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAGrB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACP,cAAC,EAAD,eAESA,GADGA,EAAIC,aEpC/BgB,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAaA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,uBAEA,sCAGQ2C,EAAWnB,KAAK,SAACT,GAEb,OAEI,aADA,CACC,EAAD,CACIA,SAAYA,GACJA,a,MCjCxC6B,IAASC,OACP,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.9791797b.chunk.js","sourcesContent":["\nimport React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\n\n\n// export const AddCategory = ( props ) => {\nexport const AddCategory = ( { setCategories } ) => {\n    \n    const [ inputValue, setInputValue ] = useState('');\n    \n    \n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    };\n\n\n    const handleSubmit = (e) => {\n\n        e.preventDefault();\n        // console.log('submit hecho')\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( cats => [inputValue, ...cats ] );\n            setInputValue('');\n        }\n\n    };\n\n    \n    \n    return (\n        <>\n            <h2>AddCategory</h2>  \n\n            <form onSubmit = { handleSubmit } >\n\n                <input \n                    type = \"text\" \n                    value = { inputValue }\n                    onChange = { handleInputChange }\n                />\n\n            </form>\n        </>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGifs = async( category ) => {\n\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=mpVUTH3ir0ZOnltzH2mzrd9j6FBFH3lU`;\n    const respuesta = await fetch( url );\n    const { data } = await respuesta.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        };\n    })\n\n    // console.log(gifs);\n\n    // set imagenes\n    // setImages( gifs );\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n\n    // console.log( {title, url} );\n\n    return (\n        <div className=\"card animate__slideInDown\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","\n// import React, { useEffect, useState } from 'react'\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\n// me permite reutilizar el codigo para traer datos.\nexport const GifGrid = ({ category }) => {\n\n    // const [images, setImages] = useState([]);\n\n    //mandar el arreglo vacio hace que solo se mande 1 vez. Esto es el componentDidMount, solo se ejecuta cuando el componente\n    // es renderizado la primera vez.\n\n    // hace que cuando se hace la peticion por primera vez, lance los gifs y los coloca en las imagenes.\n    // useEffect( () => {\n    //     // getGifs( category ).then( imgs => setImages( imgs ))\n    //     getGifs( category )\n    //         .then( setImages )\n    // }, [ category ]);\n\n    // customhook: carga la peticion fetch e indica cuando carga y cuando termino la carga\n    // cada vez q el componente cambie, va a volcer a disparar, entonces se necesita un useeffect para que se renderice solo cuando la categ cambia\n    \n    // dos puntos y el nombre que le quieres dar.\n    const { data:images, loading } = useFetchGifs( category );\n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadein\"> { category } </h3>\n            {/* Si es que es true muestra la p sino no muestra nada */}\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                            <GifGridItem \n                                key = { img.id } \n                                { ...img }\n                            />\n                            \n                        )\n                    )\n                }\n                \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n\n    // no importa el nombre puesta aqui abajo\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    // los efectos no pueden ser async xq esperan algo sincrono\n\n    useEffect(() => {\n        getGifs( category )\n            .then( imgs => {\n\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n\n            })\n    }, [category]);\n\n    // setTimeout( () => {\n    //     setState({\n    //         data: [1,2,3,4,5,6,7],\n    //         loading: true\n    //     })\n    // }, 3000);\n\n    return state;\n\n}\n\n","\nimport React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState(['Dragon Ball'])\n\n    // const handleAdd = () => {\n\n    //     //con el useState react sabe que el estado cambio x tanto debe renderizarlo.\n\n    //     // setCategories(categories.concat('hunter'));\n    //     // setCategories( [...categories,'hunter']);\n    //     // setCategories( cats => [ ...cats, 'hunter' ] );\n    // }\n\n    \n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories = { setCategories }/>\n\n            <hr />\n\n            <ol>\nÃŸ            \n                { \n                    categories.map( (category ) => {\n                        \n                        return ( \n                            // <li key = { category }> { category } </li> \n                            <GifGrid \n                                category= { category }\n                                key = { category }\n                            />\n                        );\n                    })\n                }\n\n            </ol>\n        </>\n    );\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from '../src/GifExpertApp';\nimport './index.css'\n\nReactDOM.render(\n  <GifExpertApp />, document.getElementById('root')\n);\n\n"],"sourceRoot":""}